{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aayza\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\diplom\\\\front\\\\src\\\\components\\\\AudioRecorder.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport { encode } from 'wav-encoder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function convertToWav(audioBuffer) {\n  const wavBuffer = await encode({\n    sampleRate: audioBuffer.sampleRate,\n    channelData: [audioBuffer.getChannelData(0) // Берём первый канал (моно)\n    ]\n  });\n  return new Blob([wavBuffer], {\n    type: 'audio/wav'\n  });\n}\nconst AudioRecorder = ({\n  onNewAudio\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const sendAudioToServer = async audioBlob => {\n    try {\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recording.wav');\n      const response = await fetch('http://localhost:8000/api/upload-audio', {\n        method: 'POST',\n        body: formData\n      });\n      const result = await response.json();\n      console.log('Аудио отправлено:', result);\n    } catch (error) {\n      console.error('Ошибка отправки:', error);\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        audioChunksRef.current.push(event.data);\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        try {\n          // Создаём Blob из полученных данных записи\n          const recordedBlob = new Blob(audioChunksRef.current, {\n            type: mediaRecorderRef.current.mimeType\n          });\n\n          // Конвертируем в ArrayBuffer\n          const arrayBuffer = await recordedBlob.arrayBuffer();\n\n          // Создаём AudioContext и декодируем данные\n          const audioContext = new AudioContext();\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n          // Конвертируем в WAV\n          const wavBlob = await convertToWav(audioBuffer);\n\n          // Создаём URL для воспроизведения\n          const audioUrl = URL.createObjectURL(wavBlob);\n          onNewAudio(audioUrl);\n\n          // Отправляем на сервер\n          await sendAudioToServer(wavBlob);\n        } catch (error) {\n          console.error('Ошибка обработки аудио:', error);\n        } finally {\n          audioChunksRef.current = [];\n        }\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    } catch (err) {\n      console.error('Ошибка доступа к микрофону:', err);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-recorder\",\n    children: isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"stop-button\",\n      onClick: stopRecording,\n      children: \"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-button\",\n      onClick: startRecording,\n      children: \"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0430\\u0442\\u044C \\u0433\\u043E\\u043B\\u043E\\u0441\\u043E\\u0432\\u043E\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"9vlr/drR7eRRS6Si05gDHrjPA2U=\");\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["useState","useRef","encode","jsxDEV","_jsxDEV","convertToWav","audioBuffer","wavBuffer","sampleRate","channelData","getChannelData","Blob","type","AudioRecorder","onNewAudio","_s","isRecording","setIsRecording","mediaRecorderRef","audioChunksRef","sendAudioToServer","audioBlob","formData","FormData","append","response","fetch","method","body","result","json","console","log","error","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","push","data","onstop","recordedBlob","mimeType","arrayBuffer","audioContext","AudioContext","decodeAudioData","wavBlob","audioUrl","URL","createObjectURL","start","err","stopRecording","stop","getTracks","forEach","track","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aayza/OneDrive/Рабочий стол/diplom/front/src/components/AudioRecorder.js"],"sourcesContent":["import { useState, useRef } from 'react';\r\nimport { encode } from 'wav-encoder';\r\n\r\nasync function convertToWav(audioBuffer) {\r\n  const wavBuffer = await encode({\r\n    sampleRate: audioBuffer.sampleRate,\r\n    channelData: [\r\n      audioBuffer.getChannelData(0) // Берём первый канал (моно)\r\n    ]\r\n  });\r\n  return new Blob([wavBuffer], { type: 'audio/wav' });\r\n}\r\n\r\nconst AudioRecorder = ({ onNewAudio }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n\r\n  const sendAudioToServer = async (audioBlob) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('audio', audioBlob, 'recording.wav');\r\n      \r\n      const response = await fetch('http://localhost:8000/api/upload-audio', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      const result = await response.json();\r\n      console.log('Аудио отправлено:', result);\r\n    } catch (error) {\r\n      console.error('Ошибка отправки:', error);\r\n    }\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      \r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        audioChunksRef.current.push(event.data);\r\n      };\r\n      \r\n      mediaRecorderRef.current.onstop = async () => {\r\n        try {\r\n          // Создаём Blob из полученных данных записи\r\n          const recordedBlob = new Blob(audioChunksRef.current, { \r\n            type: mediaRecorderRef.current.mimeType \r\n          });\r\n          \r\n          // Конвертируем в ArrayBuffer\r\n          const arrayBuffer = await recordedBlob.arrayBuffer();\r\n          \r\n          // Создаём AudioContext и декодируем данные\r\n          const audioContext = new AudioContext();\r\n          const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n          \r\n          // Конвертируем в WAV\r\n          const wavBlob = await convertToWav(audioBuffer);\r\n          \r\n          // Создаём URL для воспроизведения\r\n          const audioUrl = URL.createObjectURL(wavBlob);\r\n          onNewAudio(audioUrl);\r\n          \r\n          // Отправляем на сервер\r\n          await sendAudioToServer(wavBlob);\r\n        } catch (error) {\r\n          console.error('Ошибка обработки аудио:', error);\r\n        } finally {\r\n          audioChunksRef.current = [];\r\n        }\r\n      };\r\n      \r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n    } catch (err) {\r\n      console.error('Ошибка доступа к микрофону:', err);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current) {\r\n      mediaRecorderRef.current.stop();\r\n      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"audio-recorder\">\r\n      {isRecording ? (\r\n        <button className=\"stop-button\" onClick={stopRecording}>\r\n          Остановить запись\r\n        </button>\r\n      ) : (\r\n        <button className=\"start-button\" onClick={startRecording}>\r\n          Записать голосовое сообщение\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}